
import com.aventstack.extentreports.MediaEntityBuilder;
import com.aventstack.extentreports.MediaEntityModelProvider;
import com.aventstack.extentreports.Status;
import com.ecommerce.store.dataaccess.InsertResults;
import io.appium.java_client.AppiumDriver;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Constructor;
import java.nio.file.Paths;
import java.text.SimpleDateFormat;
import java.time.Duration;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Objects;
import java.util.Random;
import java.util.Set;
import java.util.concurrent.TimeUnit;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.By.ByCssSelector;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.Wait;
import org.testng.util.Strings;

public class Common {
    public static final String BROWSER_TYPE = "webDriver.browserType";
    public boolean hasSwitchedOnFrame;
    protected WebDriver driver;
    protected Wait<WebDriver> wait;
    private WaitUntil waitUntil;
    private SoftAssert softAssert;
    private long implicitTimeout;
    private long pageTimeout;
    private long scriptTimeout;
    private InsertResults insertResults;
    private JavaScriptUtil javaScriptUtil = new JavaScriptUtil();

    public Common(WebDriver driver, SoftAssert softAssert, WaitUntil waitUntil) {
        this.driver = driver;
        this.waitUntil = waitUntil;
        this.softAssert = softAssert;
    }

    public static void setProxy() {
        String proxyHost = "proxy.proxysherwin.com";
        String proxyPort = "80";
        System.setProperty("http.proxyHost", proxyHost);
        System.setProperty("http.proxyPort", proxyPort);
        System.setProperty("https.proxyHost", proxyHost);
        System.setProperty("https.proxyPort", proxyPort);
        System.setProperty("http.proxyUser", "sxa428");
        System.setProperty("http.proxyPassword", "Jasmi4422");
        System.setProperty("https.proxyUser", "sxa428");
        System.setProperty("https.proxyPassword", "Jasmi4422");
    }

    public File searchFile(File dirPath, String searchString) {
        if (dirPath.isDirectory()) {
            File[] allFiles = dirPath.listFiles();
            if (allFiles != null) {
                File[] var4 = allFiles;
                int var5 = allFiles.length;

                for(int var6 = 0; var6 < var5; ++var6) {
                    File file = var4[var6];
                    File found = this.searchFile(file, searchString);
                    if (found != null) {
                        return found;
                    }
                }
            }
        } else if (dirPath.getName().equals(searchString)) {
            return dirPath;
        }

        return null;
    }

    public InsertResults getInsertResults() {
        return this.insertResults;
    }

    public void setInsertResults(InsertResults insertResults) {
        this.insertResults = insertResults;
    }

    public void setTimeout(long timeoutInSeconds) {
        this.waitUntil.setTimout(timeoutInSeconds);
        this.driver.manage().timeouts().implicitlyWait(timeoutInSeconds, TimeUnit.SECONDS);
    }

    public void setTimeoutValues(long implicitTimeout, long pageTimeout, long scriptTimeout) {
        this.implicitTimeout = implicitTimeout;
        this.pageTimeout = pageTimeout;
        this.scriptTimeout = scriptTimeout;
        this.waitUntil.setTimeoutValues(this.implicitTimeout, this.pageTimeout, this.scriptTimeout);
    }

    public WebDriver getDriver() {
        return this.driver;
    }

    public WaitUntil getWaitUntil() {
        return this.waitUntil;
    }

    public void refreshPage() {
        this.driver.navigate().refresh();
    }

    public void hoverAndClickLink(By hoverOver, By linkToClick) {
        Actions actions = new Actions(this.driver);
        WebElement we = this.driver.findElement(hoverOver);
        we.click();
        actions.moveToElement(we).build().perform();
        FluentWait<WebDriver> wait = (new FluentWait(this.driver)).withTimeout(Duration.ofSeconds(30L)).pollingEvery(Duration.ofSeconds(200L)).ignoring(NoSuchElementException.class);
        ((WebElement)wait.until(ExpectedConditions.presenceOfElementLocated(linkToClick))).click();
    }

    public boolean hoverOver(WebElement element) {
        this.softAssert.setCause((Throwable)null);

        try {
            (new Actions(this.driver)).moveToElement(element).perform();
            return true;
        } catch (Error | Exception var3) {
            ConsoleLog.error("Hover over element did not work as expected.", var3);
            this.softAssert.setCause(var3);
            return false;
        }
    }

    public boolean tryHoverOver(WebElement element, By expectedLocator) {
        this.softAssert.setCause((Throwable)null);

        try {
            this.softAssert.setWebElements(new WebElement[]{element});
            (new Actions(this.driver)).moveToElement(element).perform();
        } catch (Error | Exception var8) {
            this.softAssert.setCause(var8);
            boolean success = JavaScriptUtil.hoverElementJS(this.driver, element);
            if (!success) {
                ConsoleLog.error("Hover over element did not work as expected.", var8);
            }
        } finally {
            if (expectedLocator != null) {
                return this.exists(expectedLocator);
            }

        }

        return true;
    }

    public boolean isAlertPresent() {
        try {
            this.driver.switchTo().alert();
            return true;
        } catch (NoAlertPresentException var2) {
            return false;
        }
    }

    public boolean dismissAlertCondition() {
        try {
            this.driver.switchTo().alert().dismiss();
            return true;
        } catch (NoAlertPresentException var2) {
            ConsoleLog.error("Dismissing an alert did not work as expected.", var2);
            return false;
        }
    }

    public boolean acceptAlertCondition() {
        try {
            this.driver.switchTo().alert().accept();
            return true;
        } catch (NoAlertPresentException var2) {
            ConsoleLog.error("Accepting an alert did not work as expected.", var2);
            return false;
        }
    }

    public boolean moveToElementAndClick(WebElement element) {
        this.softAssert.setCause((Throwable)null);

        try {
            (new Actions(this.driver)).moveToElement(element).click().perform();
            return true;
        } catch (Error | Exception var3) {
            ConsoleLog.error("Moving to an element and clicking it did not work as expected.", var3);
            this.softAssert.setCause(var3);
            return false;
        }
    }

    public boolean moveToElementByOffsetAndClick(WebElement element, int xOffset, int yOffset) {
        this.softAssert.setCause((Throwable)null);

        try {
            (new Actions(this.driver)).moveToElement(element, xOffset, yOffset).click().perform();
            return true;
        } catch (Error | Exception var5) {
            ConsoleLog.error("Moving to an Element by offset and clicking did not work as expected.", var5);
            this.softAssert.setCause(var5);
            return false;
        }
    }

    public boolean moveToElement(WebElement element) {
        this.softAssert.setCause((Throwable)null);

        try {
            (new Actions(this.driver)).moveToElement(element).perform();
            return true;
        } catch (Error | Exception var3) {
            ConsoleLog.error("Moving to an element did not work as expected.", var3);
            this.softAssert.setCause(var3);
            return false;
        }
    }

    public boolean navigateBack(String errorMessage) {
        this.driver.navigate().back();
        return true;
    }

    public boolean clickEnter(WebElement element) {
        element.sendKeys(new CharSequence[]{Keys.RETURN});
        return true;
    }

    public boolean click(WebElement element, String errorMessage) {
        this.softAssert.setCause((Throwable)null);
        boolean success = true;

        try {
            this.softAssert.setWebElements(new WebElement[]{element});
            Thread.sleep(1000L);
            if (!(this.driver instanceof AppiumDriver)) {
                JavaScriptUtil.scrollToCenter(element, this.driver);
                if (PropsUtil.getBrowserType().contains("INTERNETEXPLORER")) {
                    this.waitUntil.pageLoad();
                    this.handleIECertificate();
                }

                if (PropsUtil.getBrowserType().contains("CHROME")) {
                    this.waitUntil.pageLoad();
                }

                if (this.isAlertPresent()) {
                    this.acceptAlertCondition();
                }
            }

            Thread.sleep(1000L);
            element.click();
        } catch (Error | Exception var5) {
            var5.printStackTrace();
            ConsoleLog.error("Click element did not work as expected.", var5);
            this.softAssert.setCause(var5);
            success = false;
        }

        this.setResultStatus(errorMessage, success);
        return success;
    }

    public boolean tryClick(WebElement element, By expectedLocator) {
        this.softAssert.setCause((Throwable)null);

        try {
            element.click();
        } catch (Error | Exception var7) {
            ConsoleLog.error("Click element did not work as expected.", var7);
            this.softAssert.setCause(var7);
            JavaScriptUtil.clickElementJS(this.driver, element);
        } finally {
            if (expectedLocator != null) {
                return this.exists(expectedLocator);
            }

        }

        return true;
    }

    public boolean clickAndCloseAnyPopupWindowOrTab(WebElement element, String errorMessage) {
        this.softAssert.setCause((Throwable)null);

        try {
            String initialWindowHandle = this.driver.getWindowHandle();
            this.click(element, errorMessage);
            this.closeSecondaryWindow(initialWindowHandle);
            return true;
        } catch (Error | Exception var4) {
            ConsoleLog.error("Click element and close window did not work as expected.", var4);
            this.softAssert.setCause(var4);
            return false;
        }
    }

    public boolean closeSecondaryWindow() {
        this.softAssert.setCause((Throwable)null);

        try {
            String initialWindow = this.driver.getWindowHandle();
            Set<String> set = this.driver.getWindowHandles();
            if (set.size() > 1) {
                Iterator var3 = set.iterator();

                while(var3.hasNext()) {
                    String window = (String)var3.next();
                    this.driver.switchTo().window(window);
                }

                this.driver.close();
                this.driver.switchTo().window(initialWindow);
            }

            return true;
        } catch (Error | Exception var5) {
            ConsoleLog.error("Closing a secondary window did not work as expected.", var5);
            this.softAssert.setCause(var5);
            return false;
        }
    }

    public boolean closeSecondaryWindow(String initialWindowHandle) {
        this.softAssert.setCause((Throwable)null);

        try {
            Set<String> set = this.driver.getWindowHandles();
            if (set.size() > 1) {
                Iterator var3 = set.iterator();

                while(var3.hasNext()) {
                    String window = (String)var3.next();
                    this.driver.switchTo().window(window);
                }

                this.driver.close();
                this.driver.switchTo().window(initialWindowHandle);
            }

            return true;
        } catch (Error | Exception var5) {
            ConsoleLog.error("Closing a secondary window did not work as expected.", var5);
            this.softAssert.setCause(var5);
            return false;
        }
    }

    public boolean closeAnyPendingWindow() {
        this.softAssert.setCause((Throwable)null);

        try {
            Set<String> set = this.driver.getWindowHandles();
            if (set.size() > 1) {
                Iterator var2 = set.iterator();

                while(var2.hasNext()) {
                    String window = (String)var2.next();
                    if (this.driver.switchTo().window(window).getWindowHandles().size() > 1) {
                        this.driver.close();
                    }
                }
            }

            return true;
        } catch (Error | Exception var4) {
            ConsoleLog.error("Closing a secondary window did not work as expected.", var4);
            this.softAssert.setCause(var4);
            return false;
        }
    }

    public boolean closeAnyWindowWhoseURLContains(String text) {
        this.softAssert.setCause((Throwable)null);

        try {
            Set<String> set = this.driver.getWindowHandles();
            if (set.size() > 1) {
                Iterator var3 = set.iterator();

                while(var3.hasNext()) {
                    String window = (String)var3.next();
                    if (!StringUtils.isBlank(window)) {
                        WebDriver hasWindow = this.driver.switchTo().window(window);
                        String url = hasWindow != null ? hasWindow.getCurrentUrl() : "";
                        if (url.contains(text)) {
                            this.sleepFor(1L);
                            this.driver.close();
                        }
                    }
                }
            }

            return true;
        } catch (Error | Exception var7) {
            ConsoleLog.error("Closing a window whose URL contains " + text + " did not work as expected.", var7);
            this.softAssert.setCause(var7);
            return false;
        }
    }

    public boolean sleepFor(long seconds) {
        this.softAssert.setCause((Throwable)null);

        try {
            Thread.sleep(seconds * 1000L);
            return true;
        } catch (InterruptedException var4) {
            ConsoleLog.error("Attempt to sleep thread did not work as expected.", var4);
            this.softAssert.setCause(var4);
            return false;
        }
    }

    public int getRandomInt(int maxExclusive) {
        return (new Random()).nextInt(maxExclusive);
    }

    public int getRandomInt(int minInclusive, int maxExclusive) {
        Random random = new Random();
        int value = random.nextInt(maxExclusive);

        while(value < minInclusive) {
            value = random.nextInt(maxExclusive);
            this.sleepFor(1L);
        }

        return value;
    }

    public boolean type(WebElement element, String query) {
        return this.type(element, query, true);
    }

    public boolean type(WebElement element, String query, boolean clearField) {
        this.softAssert.setCause((Throwable)null);

        try {
            if (clearField) {
                element.clear();
            }

            element.sendKeys(new CharSequence[]{query});
            return true;
        } catch (Error | Exception var5) {
            ConsoleLog.error("Typing into an element did not work as expected.", var5);
            this.softAssert.setCause(var5);
            return false;
        }
    }

    public boolean typeListField(WebElement element, String query, boolean clearField) {
        this.softAssert.setCause((Throwable)null);

        try {
            if (clearField) {
                element.clear();
            }

            element.sendKeys(new CharSequence[]{query});
            return true;
        } catch (Error | Exception var5) {
            ConsoleLog.error("Typing into an element did not work as expected.", var5);
            this.softAssert.setCause(var5);
            return false;
        }
    }

    public boolean isDisplayed(WebElement element) {
        this.softAssert.setCause((Throwable)null);

        try {
            return element.isDisplayed();
        } catch (Error | Exception var3) {
            ConsoleLog.error("Checking if an element is displayed did not work as expected.", var3);
            this.softAssert.setCause(var3);
            return false;
        }
    }

    public boolean isSelected(WebElement element) {
        this.softAssert.setCause((Throwable)null);

        try {
            return element.isSelected();
        } catch (Error | Exception var3) {
            ConsoleLog.error("Checking if an element is displayed did not work as expected.", var3);
            this.softAssert.setCause(var3);
            return false;
        }
    }

    public boolean isElementPresent(By by) {
        this.driver.manage().timeouts().implicitlyWait(2L, TimeUnit.SECONDS);
        return this.driver.findElements(by).size() != 0;
    }

    public List<WebElement> getElements(By locator) {
        this.driver.manage().timeouts().implicitlyWait(0L, TimeUnit.SECONDS);
        List<WebElement> list = this.driver.findElements(locator);
        this.driver.manage().timeouts().implicitlyWait(this.implicitTimeout, TimeUnit.SECONDS);
        return list;
    }

    public List<WebElement> getElements(WebElement element, By locator) {
        this.driver.manage().timeouts().implicitlyWait(0L, TimeUnit.SECONDS);
        List<WebElement> list = element.findElements(locator);
        this.driver.manage().timeouts().implicitlyWait(this.implicitTimeout, TimeUnit.SECONDS);
        return list;
    }

    public boolean dragElement(WebElement element, int xAxis, int yAxis) {
        this.softAssert.setCause((Throwable)null);

        try {
            Actions builder = new Actions(this.driver);
            builder.moveToElement(element, xAxis, yAxis).clickAndHold().moveToElement(element, xAxis + 10, yAxis + 10).release().perform();
            this.sleepFor(1L);
        } catch (Error | Exception var6) {
            ConsoleLog.error("Dragging an element did not work as expected.", var6);
            this.softAssert.setCause(var6);
            boolean success = JavaScriptUtil.dragElementByXY(this.driver, element, 10, 10);
            if (!success) {
                return false;
            }
        }

        return true;
    }

    public SoftAssert getSoftAssert() {
        return this.softAssert;
    }

    public boolean respectFieldMaxLength(WebElement inputField, int maxLength) {
        this.softAssert.setCause((Throwable)null);

        boolean success;
        try {
            inputField.clear();
            StringBuilder builder = new StringBuilder();

            for(int i = 0; i < maxLength + 1; ++i) {
                builder.append("a");
            }

            inputField.sendKeys(new CharSequence[]{builder.toString()});
            String value = inputField.getAttribute("value");
            inputField.clear();
            success = value.length() == maxLength;
        } catch (Error | Exception var6) {
            ConsoleLog.error("Checking the maxlength of a field did not work as expected.", var6);
            this.softAssert.setCause(var6);
            success = false;
        }

        return success;
    }

    public boolean selectDropdownItemByIndex(WebElement ddElement, int index) {
        boolean success = true;
        this.softAssert.setCause((Throwable)null);

        try {
            Select selectElement = new Select(ddElement);
            int optionCount = selectElement.getOptions().size();
            System.out.println(((WebElement)selectElement.getOptions().get(1)).toString());
            if (index < 0 || index > optionCount - 1) {
                index = this.getRandomInt(optionCount);
            }

            selectElement.selectByIndex(index);
        } catch (Error | Exception var6) {
            ConsoleLog.error("Selecting an item in a dropdown Select menu did not work as expected.", var6);
            this.softAssert.setCause(var6);
            success = false;
        }

        return success;
    }

    public boolean selectDropdownItemByIndex(WebElement ddElement, int index, boolean includeFirstIndex) {
        boolean success = true;
        this.softAssert.setCause((Throwable)null);

        try {
            Select selectElement = new Select(ddElement);
            int optionCount = selectElement.getOptions().size();
            if (index < 0 || !includeFirstIndex && index == 0 || index > optionCount - 1) {
                index = this.getRandomInt(1, optionCount);
            }

            selectElement.selectByIndex(index);
        } catch (Error | Exception var7) {
            ConsoleLog.error("Selecting an item in a dropdown Select menu did not work as expected.", var7);
            this.softAssert.setCause(var7);
            success = false;
        }

        return success;
    }

    public boolean selectDropdownItemByRandomIndex(WebElement ddElement, boolean includeFirstIndex) {
        boolean success = true;
        this.softAssert.setCause((Throwable)null);

        try {
            Select selectElement = new Select(ddElement);
            int optionCount = selectElement.getOptions().size();
            int index = this.getRandomInt(optionCount);
            if (index < 0 || !includeFirstIndex && index == 0 || index > optionCount - 1) {
                index = this.getRandomInt(1, optionCount);
            }

            selectElement.selectByIndex(index);
        } catch (Error | Exception var7) {
            ConsoleLog.error("Selecting an item in a dropdown Select menu did not work as expected.", var7);
            this.softAssert.setCause(var7);
            success = false;
        }

        return success;
    }

    public boolean selectbuttonItemByRandomIndex(List<WebElement> ddElement, boolean includeFirstIndex) {
        boolean success = true;
        this.softAssert.setCause((Throwable)null);

        try {
            int optionCount = ddElement.size();
            int index = this.getRandomInt(optionCount);
            if (index < 0 || !includeFirstIndex && index == 0 || index > optionCount - 1) {
                index = this.getRandomInt(1, optionCount);
            }

            ((WebElement)ddElement.get(index)).click();
        } catch (Error | Exception var6) {
            ConsoleLog.error("Selecting an item in a dropdown Select menu did not work as expected.", var6);
            this.softAssert.setCause(var6);
            success = false;
        }

        return success;
    }

    public boolean selectDropdownItemByText(WebElement ddElement, String text) {
        boolean success = true;
        this.softAssert.setCause((Throwable)null);

        try {
            Select selectElement = new Select(ddElement);
            selectElement.selectByVisibleText(text);
        } catch (Error | Exception var5) {
            ConsoleLog.error("Selecting an item in a dropdown Select menu did not work as expected.", var5);
            this.softAssert.setCause(var5);
            success = false;
        }

        return success;
    }

    public String getTextOfSelectedDropDownValue(WebElement ddElement, String error) {
        WebElement option = null;
        this.softAssert.setCause((Throwable)null);

        try {
            Select selectElement = new Select(ddElement);
            option = selectElement.getFirstSelectedOption();
        } catch (Error | Exception var5) {
            ConsoleLog.error("Selecting an item in a dropdown and Getting the Text of the selected option did not work as expected", var5);
            this.softAssert.setCause(var5);
        }

        return ((WebElement)Objects.requireNonNull(option)).getText();
    }

    public boolean selectDropdownItemByValue(WebElement ddElement, String value) {
        boolean success = true;
        this.softAssert.setCause((Throwable)null);

        try {
            Select selectElement = new Select(ddElement);
            selectElement.selectByValue(value);
        } catch (Error | Exception var5) {
            ConsoleLog.error("Selecting an item in a dropdown Select menu did not work as expected.", var5);
            this.softAssert.setCause(var5);
            success = false;
        }

        return success;
    }

    public boolean exists(By locator) {
        return this.getElements(locator).size() > 0;
    }

    public boolean hasLocator(WebElement e, By locator) {
        return this.getElements(e, locator).size() != 0;
    }

    public boolean hoverAndVerifyIsTrue(WebElement webElement, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(webElement, errorMessage);
        success = success && this.tryHoverOver(webElement, (By)null);
        if (success && expectedElementLocators != null) {
            By[] var5 = expectedElementLocators;
            int var6 = expectedElementLocators.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                By locator = var5[var7];
                this.waitUntil.presenceOfElement(locator, errorMessage);
                success = success && this.getElements(locator).size() > 0;
            }
        }

        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        return success;
    }

    public boolean hoverByPartialLinkTextAndVerifyIsTrue(String partialLinkText, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        List<WebElement> webElements = this.getElements(By.partialLinkText(partialLinkText));
        WebElement webElement = null;
        if (webElements.size() > 0) {
            webElement = (WebElement)webElements.get(0);
        }

        boolean success = false;
        if (webElement != null) {
            this.waitUntil.visibilityOfElements(webElement, errorMessage);
            success = this.hoverOver(webElement);
            if (success && expectedElementLocators != null) {
                By[] var7 = expectedElementLocators;
                int var8 = expectedElementLocators.length;

                for(int var9 = 0; var9 < var8; ++var9) {
                    By locator = var7[var9];
                    this.waitUntil.presenceOfElement(locator, errorMessage);
                    success = success && this.waitUntil.visibilityOfAllElementsLocatedBy(locator, errorMessage);
                }
            }

            Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        } else {
            this.setTestResultFalse("An Exception or Assertion Error occured");
        }

        return success;
    }

    public boolean hoverByPartialLinkTextAndVerifyIsTrue(WebElement webElement, String partialLinkText, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        List<WebElement> webElements = this.getElements(webElement, By.partialLinkText(partialLinkText));
        WebElement element = null;
        if (webElements.size() > 0) {
            element = (WebElement)webElements.get(0);
        }

        boolean success = false;
        if (element != null) {
            this.waitUntil.visibilityOfElements(element, errorMessage);
            success = this.hoverOver(element);
            if (success && expectedElementLocators != null) {
                By[] var8 = expectedElementLocators;
                int var9 = expectedElementLocators.length;

                for(int var10 = 0; var10 < var9; ++var10) {
                    By locator = var8[var10];
                    this.waitUntil.presenceOfElement(locator, errorMessage);
                    success = success && this.waitUntil.visibilityOfAllElementsLocatedBy(locator, errorMessage);
                }
            }

            Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        } else {
            this.setTestResultFalse("An Exception or Assertion Error occured");
        }

        return success;
    }

    public boolean clickAndVerifyIsTrue(WebElement webElement, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(webElement, errorMessage);
        if (success) {
            webElement = this.waitUntil.elementToBeClickable(webElement, errorMessage);
            if (webElement != null) {
                success = this.click(webElement, errorMessage);
                if (success && expectedElementLocators != null) {
                    By[] var5 = expectedElementLocators;
                    int var6 = expectedElementLocators.length;

                    for(int var7 = 0; var7 < var6; ++var7) {
                        By locator = var5[var7];
                        this.waitUntil.presenceOfElement(locator, errorMessage);
                        success = success && this.getElements(locator).size() > 0;
                    }
                }
            } else {
                success = false;
            }
        }

        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        return success;
    }

    public boolean clickByPartialLinkTextAndVerifyIsTrue(String partialLinkText, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        List<WebElement> webElements = this.getElements(By.partialLinkText(partialLinkText));
        WebElement webElement = null;
        if (webElements.size() > 0) {
            webElement = (WebElement)webElements.get(0);
        }

        boolean success = true;
        if (webElement != null) {
            WebElement e = this.waitUntil.elementToBeClickable(webElement, errorMessage);
            if (e == null) {
                success = false;
            }

            success = success && this.click(webElement, errorMessage);
            if (success && expectedElementLocators != null) {
                By[] var8 = expectedElementLocators;
                int var9 = expectedElementLocators.length;

                for(int var10 = 0; var10 < var9; ++var10) {
                    By locator = var8[var10];
                    this.waitUntil.presenceOfElement(locator, errorMessage);
                    success = success && this.waitUntil.visibilityOfAllElementsLocatedBy(locator, errorMessage);
                }
            }

            Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        } else {
            this.setTestResultFalse("An Exception or Assertion Error occured - " + errorMessage);
        }

        return success;
    }

    public boolean clickByPartialLinkTextAndVerifyIsTrue(WebElement webElement, String partialLinkText, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        List<WebElement> webElements = this.getElements(webElement, By.partialLinkText(partialLinkText));
        WebElement element = null;
        if (webElements.size() > 0) {
            element = (WebElement)webElements.get(0);
        }

        boolean success = true;
        if (element != null) {
            WebElement e = this.waitUntil.elementToBeClickable(element, errorMessage);
            if (e == null) {
                success = false;
            }

            success = success && this.click(element, errorMessage);
            if (success && expectedElementLocators != null) {
                By[] var9 = expectedElementLocators;
                int var10 = expectedElementLocators.length;

                for(int var11 = 0; var11 < var10; ++var11) {
                    By locator = var9[var11];
                    this.waitUntil.presenceOfElement(locator, errorMessage);
                    success = success && this.waitUntil.visibilityOfAllElementsLocatedBy(locator, errorMessage);
                }
            }

            Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        } else {
            this.setTestResultFalse("An Exception or Assertion Error occured - " + errorMessage);
        }

        return success;
    }

    public boolean moveClickAndVerifyIsTrue(WebElement webElement, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        WebElement e = this.waitUntil.elementToBeClickable(webElement, errorMessage);
        boolean success = true;
        if (e == null) {
            success = false;
        }

        success = success && this.moveToElementAndClick(webElement);
        if (success && expectedElementLocators != null) {
            By[] var6 = expectedElementLocators;
            int var7 = expectedElementLocators.length;

            for(int var8 = 0; var8 < var7; ++var8) {
                By locator = var6[var8];
                this.waitUntil.presenceOfElement(locator, errorMessage);
                success = success && this.getElements(locator).size() > 0;
            }
        }

        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        return success;
    }

    public boolean dragAndVerifyIsTrue(WebElement webElement, int dragCount, String errorMessage, By... expectedElementLocators) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(webElement, errorMessage);

        for(int i = 1; i <= dragCount; ++i) {
            success = success && this.dragElement(webElement, 1, 1);
        }

        if (success && expectedElementLocators != null) {
            By[] var7 = expectedElementLocators;
            int var8 = expectedElementLocators.length;

            for(int var9 = 0; var9 < var8; ++var9) {
                By locator = var7[var9];
                this.waitUntil.presenceOfElement(locator, errorMessage);
                success = success && this.getElements(locator).size() > 0;
            }
        }

        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        return success;
    }

    public boolean typeAndVerifyIsTrue(WebElement webElement, String text, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(webElement, errorMessage);
        success = success && this.type(webElement, text, true);
        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(webElement));
        return success;
    }

    public boolean selectDropdownByValueAndVerifyIsTrue(WebElement selectElement, String ddValue, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.selectDropdownItemByValue(selectElement, ddValue);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(selectElement));
        return success;
    }

    public boolean selectRandomAndVerifyIsTrue(WebElement ddElement, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(ddElement, errorMessage);
        success = success && this.selectDropdownItemByRandomIndex(ddElement, false);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(ddElement));
        return success;
    }

    public boolean selectDropdownItemByTextAndVerifiyIsTrue(WebElement ddElement, String text, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(ddElement, errorMessage);
        success = success && this.selectDropdownItemByText(ddElement, text);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(ddElement));
        return success;
    }

    public boolean selectDropdownItemByIndexAndVerifiyIsTrue(WebElement ddElement, int index, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(ddElement, errorMessage);
        success = success && this.selectDropdownItemByIndex(ddElement, index);
        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(ddElement));
        return success;
    }

    public boolean selectDropdownItemByIndexButFirstAndVerifiyIsTrue(WebElement ddElement, int index, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.waitUntil.visibilityOfElements(ddElement, errorMessage);
        success = success && this.selectDropdownItemByIndex(ddElement, index, false);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(ddElement));
        return success;
    }

    public void verifyElementsTextContentAreEquals(WebElement element1, WebElement element2, String errorMessage) {
        String actualValue;
        try {
            actualValue = element1.getText();
        } catch (Error | Exception var8) {
            ConsoleLog.error("Unabled to get text from an actual element as expected. -- " + errorMessage, var8);
            this.softAssert.setCause(var8);
            actualValue = "Unable to get text from element1";
        }

        String expectedValue;
        try {
            expectedValue = element2.getText();
        } catch (Error | Exception var7) {
            ConsoleLog.error("Unabled to get text from an expected element as expected. -- " + errorMessage, var7);
            this.softAssert.setCause(var7);
            expectedValue = "Unable to get text from element2";
        }

        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        Verify.isEquals(this.softAssert, actualValue, expectedValue, errorMessage, this.createList(element1, element2));
    }

    public void isEqualsIgnoreCase(String actual, String expected, String errorMessage) {
        try {
            Verify.isEqualsIgnoreCase(this.softAssert, actual, expected, errorMessage);
        } catch (AssertionError var5) {
            this.insertResults.setPassFail("FAILED");
            this.insertResults.setScriptError(errorMessage);
            throw var5;
        }
    }

    public void verifyisEquals(String actual, String expected, String errorMessage) {
        try {
            Verify.isEquals(this.softAssert, actual, expected, errorMessage);
        } catch (AssertionError var5) {
            this.insertResults.setPassFail("FAILED");
            this.insertResults.setScriptError(errorMessage);
            throw var5;
        }
    }

    public void verifyisNotEquals(String actual, String expected, String errorMessage) {
        try {
            Verify.isNotEquals(this.softAssert, actual, expected, errorMessage);
        } catch (AssertionError var5) {
            this.insertResults.setPassFail("FAILED");
            this.insertResults.setScriptError(errorMessage);
            throw var5;
        }
    }

    public boolean verifyIsDisplayed(WebElement element, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = this.isDisplayed(element);
        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage, this.createList(element));
        return success;
    }

    public boolean getTextAndVerifyNotEmpty(WebElement element, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        String elementText = this.getText(element, errorMessage);
        boolean success = this.isElementTextValueEmpty(elementText, errorMessage);
        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage);
        return success;
    }

    public boolean isElementTextValueEmpty(String elementText, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        boolean success = !elementText.equals("");
        this.setResultStatus(errorMessage, success);
        Verify.isTrue(this.softAssert, success, errorMessage);
        return success;
    }

    public String getText(WebElement element, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        return this.waitUntil.visibilityOfElements(element, errorMessage) ? element.getText() : "";
    }

    public String getTextNoWait(WebElement element, String errorMessage) {
        try {
            return element.getText();
        } catch (Error | Exception var4) {
            ConsoleLog.error("Unable to get Text from given element.", var4);
            this.softAssert.setCause(var4);
            return "";
        }
    }

    public boolean verifyIsTrue(boolean success, String errorMessage) {
        errorMessage = IOUtil.updateErrorMessage(errorMessage);
        Verify.isTrue(this.softAssert, success, errorMessage);
        return success;
    }

    public void setTestResultFalse(String errorMessage) {
        this.verifyIsTrue(false, errorMessage);
    }

    public void setTestResultTrue() {
        this.softAssert.assertTrue(true);
    }

    public void verifyAllAreDisplayed(WebElement... elements) {
        String errorMessage = IOUtil.updateErrorMessage("Element(s) not visible");
        WebElement[] var3 = elements;
        int var4 = elements.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            WebElement element = var3[var5];
            this.verifyIsDisplayed(element, errorMessage);
        }

    }

    public void verifyAllAreDisplayed(String[] errorMessages, WebElement... elements) {
        int c = 0;
        WebElement[] var5 = elements;
        int var6 = elements.length;

        for(int var7 = 0; var7 < var6; ++var7) {
            WebElement element = var5[var7];
            String errorMessage = IOUtil.updateErrorMessage(errorMessages[c]);
            this.verifyIsDisplayed(element, errorMessage);
            ++c;
        }

    }

    public SimpleDateFormat getSimpleDateFormat() {
        return new SimpleDateFormat("dd/M/yyyy");
    }

    public <T> WebDriver switchToFrame(Object object, Class<T> t, String errorMessage) {
        this.softAssert.setCause((Throwable)null);

        try {
            if (object instanceof WebElement) {
                this.driver = this.driver.switchTo().frame((WebElement)object);
            } else if (object instanceof String) {
                this.driver = this.driver.switchTo().frame(object.toString());
            } else {
                this.driver = this.driver.switchTo().frame(Integer.parseInt(object.toString()));
            }

            this.sleepFor(2L);
            this.getWaitUntil().setDriver(this.driver);
            Constructor<T> ctor = t.getConstructor(this.getClass());
            Object obj = ctor.newInstance(this);
            PageFactory.initElements(this.driver, obj);
            this.hasSwitchedOnFrame = true;
        } catch (Error | Exception var6) {
            ConsoleLog.error("Unable to switch to frame", var6);
            this.softAssert.setCause(var6);
            this.hasSwitchedOnFrame = false;
            this.setResultStatus(errorMessage, this.hasSwitchedOnFrame);
            this.setTestResultFalse("Could not switch to frame");
        }

        return this.driver;
    }

    public boolean isNotEmpty(String actualText) {
        boolean iflag = false;
        if (!actualText.equals("")) {
            iflag = true;
        }

        return iflag;
    }

    public <T> WebDriver switchToDefaultFrame(Class<T> t) {
        this.softAssert.setCause((Throwable)null);

        try {
            this.driver = this.driver.switchTo().defaultContent();
            this.sleepFor(2L);
            this.getWaitUntil().setDriver(this.driver);
            Constructor<T> ctor = t.getConstructor(this.getClass());
            Object obj = ctor.newInstance(this);
            PageFactory.initElements(this.driver, obj);
            this.hasSwitchedOnFrame = false;
        } catch (Error | Exception var4) {
            ConsoleLog.error("Unable to switch back to default frame", var4);
            this.softAssert.setCause(var4);
            this.setTestResultFalse("Could not switch back to default frame");
        }

        return this.driver;
    }

    public WebDriver switchToNewWindow() {
        Object[] array = this.driver.getWindowHandles().toArray();
        int size = array.length;
        this.driver.switchTo().window((String)array[size - 1]);
        return this.driver;
    }

    public List<WebElement> createList(WebElement... webElements) {
        List<WebElement> elements = new ArrayList();
        Collections.addAll(elements, webElements);
        return elements;
    }

    public String getAttribute(WebElement element, String attribute) {
        this.softAssert.setCause((Throwable)null);

        try {
            return element.getAttribute(attribute);
        } catch (Error | Exception var4) {
            ConsoleLog.error("Unable to get attribute from attribute", var4);
            this.softAssert.setCause(var4);
            return "Error";
        }
    }

    public void handleIECertificate() {
        if (PropsUtil.getBrowserType().contains("XPLORER") && !PropsUtil.isSauceEnabled()) {
            try {
                List<WebElement> list = this.getElements(By.id("overridelink"));
                int amount = list.size();
                WebElement override;
                if (amount > 0) {
                    do {
                        override = (WebElement)this.getElements(By.id("overridelink")).get(0);
                        this.driver.navigate().to("javascript:document.getElementById('overridelink').click()");
                    } while(override.isDisplayed());
                }
            } catch (Exception var4) {
            }
        }

    }

    public void setResultStatus(String errorMessage, boolean success) {
        if (success) {
            this.insertResults.setPassFail("PASSED");
            this.insertResults.setScriptError("");
        } else {
            this.insertResults.setPassFail("FAILED");
            this.insertResults.setScriptError(errorMessage);
        }

    }

    public String getPageTitle() {
        return this.driver.getTitle();
    }

    public String getPageURL() {
        return this.driver.getCurrentUrl();
    }

    public void htmlReporter(boolean result, String description) {
        if (result) {
            ExtentTestManager.getTest().log(Status.PASS, description);
            ConsoleLog.info("PASS --> " + description);
        } else {
            this.setTestNgResult("fail");
            ConsoleLog.error("FAIL --> " + description);
            String screenShotName = null;
            String errorMessage = null;

            try {
                boolean shouldTakeFullPageScreenshot_OnTestFailure = Boolean.parseBoolean(System.getProperty("webDriver.fullPageScreenshot"));
                if (shouldTakeFullPageScreenshot_OnTestFailure) {
                    System.setProperty("webDriver.fullPageScreenshot", "false");
                }

                File driverScreenshot = IOUtil.highlightAndTakeScreenshot(this.driver, new LinkedList());
                if (shouldTakeFullPageScreenshot_OnTestFailure != Boolean.parseBoolean(System.getProperty("webDriver.fullPageScreenshot"))) {
                    System.setProperty("webDriver.fullPageScreenshot", String.valueOf(shouldTakeFullPageScreenshot_OnTestFailure));
                }

                String dateTimeStamp = String.format("%td%1$tb%1$tY_%1$tH%1$tM%1$tS", new Date());
                screenShotName = driverScreenshot.getName().replace(".png", "") + "_" + dateTimeStamp + ".png";
                String buildIdJenkins = System.getProperties().getProperty("jenkinsBuildId");
                String destination = System.getProperty("user.dir") + "/target/";
                if (!Strings.isNullOrEmpty(buildIdJenkins)) {
                    destination = destination + buildIdJenkins + "/" + screenShotName;
                } else {
                    destination = destination + screenShotName;
                }

                File finalDestination = new File(destination);
                FileUtils.copyFile(driverScreenshot, finalDestination);
                if (Strings.isNullOrEmpty(buildIdJenkins)) {
                    screenShotName = "../target/" + screenShotName;
                }
            } catch (Exception var12) {
                errorMessage = Arrays.toString(var12.getStackTrace());
            }

            if (Strings.isNullOrEmpty(screenShotName)) {
                ExtentTestManager.getTest().log(Status.FAIL, description + "<br> Got below exception while taking the screenshot : <br>" + errorMessage);
            } else {
                MediaEntityModelProvider mediaEntityModelProvider = null;

                try {
                    mediaEntityModelProvider = MediaEntityBuilder.createScreenCaptureFromPath(screenShotName).build();
                } catch (Exception var11) {
                }

                ExtentTestManager.getTest().log(Status.FAIL, description + "<br>", mediaEntityModelProvider);
                IOUtil.setScreenShotFileName();
            }
        }

    }

    public boolean containsText(String containerString, String containedString) {
        return containerString.contains(containedString);
    }

    public boolean equalsIgnoreCaseText(String firstString, String secondString) {
        return firstString.equalsIgnoreCase(secondString);
    }

    public boolean containsIgnoreCaseText(String firstString, String secondString) {
        return this.containsText(firstString.toLowerCase(), secondString.toLowerCase());
    }

    public boolean checkLinksWithNewTab(String pageTitleMustContain) {
        this.sleepFor(1L);
        ArrayList<String> tabs = new ArrayList(this.driver.getWindowHandles());
        String pageTitleActual = "";
        String pageUrl = "";
        if (tabs.size() > 1) {
            this.driver.switchTo().window((String)tabs.get(1));
            this.waitUntil.pageLoad();
            pageTitleActual = this.getPageTitle();
            pageUrl = this.getPageURL();
            this.driver.close();
            this.driver.switchTo().window((String)tabs.get(0));
        } else {
            pageTitleActual = this.getPageTitle();
            pageUrl = this.getPageURL();
            this.navigateBack("Unable to navigate");
            this.htmlReporter(false, "System navigates to page in same tab");
        }

        boolean result = false;
        if (this.containsIgnoreCaseText(pageTitleActual, pageTitleMustContain) || this.containsIgnoreCaseText(pageUrl, pageTitleMustContain)) {
            result = true;
        }

        return result;
    }

    public boolean checkNavigationInSameTab(String pageTitleMustContain, String expectedPageName) {
        this.sleepFor(2L);
        this.getWaitUntil().pageLoad();
        String pageTitleActual = this.getPageTitle();
        String pageUrl = this.getPageURL();
        boolean result = false;
        if (this.containsIgnoreCaseText(pageTitleActual, pageTitleMustContain) || this.containsIgnoreCaseText(pageUrl, pageTitleMustContain)) {
            result = true;
        }

        this.htmlReporter(result, "Verify system navigates to <b>" + expectedPageName + " </b>page.");
        this.navigateBack("");
        this.sleepFor(1L);
        this.getWaitUntil().pageLoad();
        return result;
    }

    public boolean isDisplayed(WebElement element, Boolean highlight) {
        this.softAssert.setCause((Throwable)null);

        try {
            this.moveToElement(element);
            if (highlight) {
                this.javaScriptUtil.highlightElement(element, this.driver);
            }

            return element.isDisplayed();
        } catch (Error | Exception var4) {
            ConsoleLog.error("Checking if an element is displayed did not work as expected.", var4);
            this.softAssert.setCause(var4);
            return false;
        }
    }

    public boolean waitForFileToDownload(int maxWaitTimeInSeconds, String directoryPath, String expectedFileName) {
        FluentWait<WebDriver> fluentWait = (new FluentWait(this.driver)).withTimeout(Duration.ofSeconds((long)maxWaitTimeInSeconds)).pollingEvery(Duration.ofMillis(200L));
        File fileToCheck = Paths.get(directoryPath).resolve(expectedFileName).toFile();
        fluentWait.until((webDriver) -> {
            return fileToCheck.exists();
        });
        return fileToCheck.exists();
    }

    public boolean isFileDownloaded(String downloadPath, String fileName) {
        File dir = new File(downloadPath);
        File[] dirContents = dir.listFiles();
        if (dirContents != null && dirContents.length != 0) {
            File[] var5 = dirContents;
            int var6 = dirContents.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                File dirContent = var5[var7];
                if (dirContent.getName().contains(fileName)) {
                    return true;
                }
            }

            return false;
        } else {
            return false;
        }
    }

    public String getBrowserDownloadPath() {
        return System.getProperty("browser.download.path");
    }

    public boolean clearDirectory(String directoryPath) {
        try {
            FileUtils.cleanDirectory(new File(directoryPath));
            return true;
        } catch (Exception var3) {
            return false;
        }
    }

    public boolean deleteSpecificFileFromDirectory(String directoryPath, String fileName) {
        return FileUtils.deleteQuietly(new File(directoryPath + File.separator + fileName));
    }

    public File getLatestFileFromDirectory(String directoryPath) {
        File dir = new File(directoryPath);
        File[] files = dir.listFiles();
        if (files != null && files.length != 0) {
            File lastModifiedFile = files[0];
            File[] var5 = files;
            int var6 = files.length;

            for(int var7 = 0; var7 < var6; ++var7) {
                File file = var5[var7];
                if (lastModifiedFile.lastModified() < file.lastModified()) {
                    lastModifiedFile = file;
                }
            }

            return lastModifiedFile;
        } else {
            return null;
        }
    }

    public String getFileExtension(String fileNameWithFullPath) {
        return FilenameUtils.getExtension(fileNameWithFullPath);
    }

    public String getTestNgResult() {
        String path = System.getProperty("user.dir") + "\\logs\\reportConfig.txt";
        String testNgResult = null;

        try {
            File file = new File(path);
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);

            do {
                testNgResult = br.readLine();
            } while(br.readLine() != null);

            br.close();
        } catch (Exception var6) {
        }

        return testNgResult;
    }

    public void setTestNgResult(String value) {
        String path = System.getProperty("user.dir") + "\\logs\\reportConfig.txt";

        try {
            File file = new File(path);
            file.createNewFile();
            FileWriter fw = new FileWriter(file);
            BufferedWriter bw = new BufferedWriter(fw);
            bw.write(value);
            bw.flush();
            bw.close();
        } catch (IOException var6) {
            var6.printStackTrace();
        }

    }

    public void updateTestNgResult() {
        String testNGResult = this.getTestNgResult();
        if (testNGResult.contains("fail".trim())) {
            this.softAssert.assertFalse(true);
        } else {
            this.setTestResultTrue();
        }

    }

    public boolean privacySettingsDialog(boolean hasToAcceptPrivacySettings) {
        By PRIVACY_SETTINGS_DIALOG = new ByCssSelector("section[aria-labelledby*='Consent']");
        By PRIVACY_SETTINGS_ALLOW = new ByCssSelector("button#ensAllow");
        By PRIVACY_SETTINGS_DENY = new ByCssSelector("button#ensDeny");
        this.sleepFor(1L);
        if (this.isElementPresent(PRIVACY_SETTINGS_DIALOG) && this.getDriver().findElement(PRIVACY_SETTINGS_DIALOG).isDisplayed()) {
            if (hasToAcceptPrivacySettings) {
                this.clickAndVerifyIsTrue(this.getDriver().findElement(PRIVACY_SETTINGS_ALLOW), "Failed to accept/ok the Privacy Settings");
                ConsoleLog.info("Accepted privacy setting by clicking on the OK button");
            } else {
                this.clickAndVerifyIsTrue(this.getDriver().findElement(PRIVACY_SETTINGS_DENY), "Failed to close/deny the Privacy Settings");
                ConsoleLog.info("Denied privacy setting by closing the popup");
            }

            return true;
        } else {
            ConsoleLog.info("Either Privacy Settings dialog box is not displayed or took longer to load");
            return false;
        }
    }

    public boolean termsOfUseDialog() {
        By TERMS_OF_USE_DIALOG = new ByCssSelector("div.terms_modal__content");
        By TERMS_OF_USE_ACCEPT = new ByCssSelector("#termsModal_closeBtn");
        this.sleepFor(1L);
        if (this.isElementPresent(TERMS_OF_USE_DIALOG) && this.getDriver().findElement(TERMS_OF_USE_DIALOG).isDisplayed()) {
            this.clickAndVerifyIsTrue(this.getDriver().findElement(TERMS_OF_USE_ACCEPT), "Failed to accept/ok the Privacy Settings");
            ConsoleLog.info("Accepted the updated Terms of Use by clicking on the OK button");
            return true;
        } else {
            ConsoleLog.info("Either updated Terms of Use dialog box is not displayed or took longer to load");
            return false;
        }
    }

    public boolean coronoDialogBox(boolean hasToClickOnOk) {
        By CORONO_DIALOG = new ByCssSelector("div.terms_modal__content");
        By CORONO_OK = new ByCssSelector("span#termsModal_closeBtn");
        this.sleepFor(1L);
        if (this.isElementPresent(CORONO_DIALOG) && this.getDriver().findElement(CORONO_DIALOG).isDisplayed()) {
            if (hasToClickOnOk) {
                this.clickAndVerifyIsTrue(this.getDriver().findElement(CORONO_OK), "Failed to click on ok on corono dialog box");
                ConsoleLog.info("clicked OK button on corono pop up");
            } else {
                ConsoleLog.info("After opening the URL corono pop up is not visible");
            }

            return true;
        } else {
            ConsoleLog.info("Either Corono dialog box is not displayed or took longer to load");
            return false;
        }
    }
}
